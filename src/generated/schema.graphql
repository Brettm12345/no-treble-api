### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String!
  user: User!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Message {
  body: String!
  id: ID!
  receiver: User!
  sender: User!
}

type MessageConnection {
  aggregate: AggregateMessage!
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

input MessageCreateInput {
  body: String!
  id: ID
  receiver: UserCreateOneWithoutReceivedMessagesInput!
  sender: UserCreateOneWithoutSentMessagesInput!
}

input MessageCreateManyWithoutReceiverInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutReceiverInput!]
}

input MessageCreateManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutSenderInput!]
}

input MessageCreateWithoutReceiverInput {
  body: String!
  id: ID
  sender: UserCreateOneWithoutSentMessagesInput!
}

input MessageCreateWithoutSenderInput {
  body: String!
  id: ID
  receiver: UserCreateOneWithoutReceivedMessagesInput!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

enum MessageOrderByInput {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input MessageScalarWhereInput {
  AND: [MessageScalarWhereInput!]
  body: String
  body_contains: String
  body_ends_with: String
  body_gt: String
  body_gte: String
  body_in: [String!]
  body_lt: String
  body_lte: String
  body_not: String
  body_not_contains: String
  body_not_ends_with: String
  body_not_in: [String!]
  body_not_starts_with: String
  body_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
}

input MessageUpdateInput {
  body: String
  receiver: UserUpdateOneRequiredWithoutReceivedMessagesInput
  sender: UserUpdateOneRequiredWithoutSentMessagesInput
}

input MessageUpdateManyDataInput {
  body: String
}

input MessageUpdateManyMutationInput {
  body: String
}

input MessageUpdateManyWithoutReceiverInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutReceiverInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutReceiverInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutReceiverInput!]
}

input MessageUpdateManyWithoutSenderInput {
  connect: [MessageWhereUniqueInput!]
  create: [MessageCreateWithoutSenderInput!]
  delete: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  disconnect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  data: MessageUpdateManyDataInput!
  where: MessageScalarWhereInput!
}

input MessageUpdateWithoutReceiverDataInput {
  body: String
  sender: UserUpdateOneRequiredWithoutSentMessagesInput
}

input MessageUpdateWithoutSenderDataInput {
  body: String
  receiver: UserUpdateOneRequiredWithoutReceivedMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutReceiverInput {
  data: MessageUpdateWithoutReceiverDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  data: MessageUpdateWithoutSenderDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutReceiverInput {
  create: MessageCreateWithoutReceiverInput!
  update: MessageUpdateWithoutReceiverDataInput!
  where: MessageWhereUniqueInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  create: MessageCreateWithoutSenderInput!
  update: MessageUpdateWithoutSenderDataInput!
  where: MessageWhereUniqueInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  body: String
  body_contains: String
  body_ends_with: String
  body_gt: String
  body_gte: String
  body_in: [String!]
  body_lt: String
  body_lte: String
  body_not: String
  body_not_contains: String
  body_not_ends_with: String
  body_not_in: [String!]
  body_not_starts_with: String
  body_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  receiver: UserWhereInput
  sender: UserWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  changePassword(newPassword: String!, oldPassword: String!): AuthPayload!
  createMessage(data: MessageCreateInput!): Message!
  createUser(data: UserCreateInput!): User!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteUser(where: UserWhereUniqueInput!): User
  login(email: String, password: String!): AuthPayload!
  signup(email: String!, name: String!, password: String!): AuthPayload!
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  upsertMessage(create: MessageCreateInput!, update: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  me: User
  message(where: MessageWhereUniqueInput!): Message
  messages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]!
  messagesConnection(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): MessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type User {
  email: String!
  id: ID!
  name: String!
  receivedMessages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]
  sentMessages(after: String, before: String, first: Int, last: Int, orderBy: MessageOrderByInput, skip: Int, where: MessageWhereInput): [Message!]
  spotifyToken: String
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateInput {
  email: String!
  id: ID
  name: String!
  password: String!
  receivedMessages: MessageCreateManyWithoutReceiverInput
  sentMessages: MessageCreateManyWithoutSenderInput
  spotifyToken: String
}

input UserCreateOneWithoutReceivedMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReceivedMessagesInput
}

input UserCreateOneWithoutSentMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentMessagesInput
}

input UserCreateWithoutReceivedMessagesInput {
  email: String!
  id: ID
  name: String!
  password: String!
  sentMessages: MessageCreateManyWithoutSenderInput
  spotifyToken: String
}

input UserCreateWithoutSentMessagesInput {
  email: String!
  id: ID
  name: String!
  password: String!
  receivedMessages: MessageCreateManyWithoutReceiverInput
  spotifyToken: String
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  password_ASC
  password_DESC
  spotifyToken_ASC
  spotifyToken_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateInput {
  email: String
  name: String
  password: String
  receivedMessages: MessageUpdateManyWithoutReceiverInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  spotifyToken: String
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  password: String
  spotifyToken: String
}

input UserUpdateOneRequiredWithoutReceivedMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutReceivedMessagesInput
  update: UserUpdateWithoutReceivedMessagesDataInput
  upsert: UserUpsertWithoutReceivedMessagesInput
}

input UserUpdateOneRequiredWithoutSentMessagesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutSentMessagesInput
  update: UserUpdateWithoutSentMessagesDataInput
  upsert: UserUpsertWithoutSentMessagesInput
}

input UserUpdateWithoutReceivedMessagesDataInput {
  email: String
  name: String
  password: String
  sentMessages: MessageUpdateManyWithoutSenderInput
  spotifyToken: String
}

input UserUpdateWithoutSentMessagesDataInput {
  email: String
  name: String
  password: String
  receivedMessages: MessageUpdateManyWithoutReceiverInput
  spotifyToken: String
}

input UserUpsertWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput!
  update: UserUpdateWithoutReceivedMessagesDataInput!
}

input UserUpsertWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput!
  update: UserUpdateWithoutSentMessagesDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  receivedMessages_every: MessageWhereInput
  receivedMessages_none: MessageWhereInput
  receivedMessages_some: MessageWhereInput
  sentMessages_every: MessageWhereInput
  sentMessages_none: MessageWhereInput
  sentMessages_some: MessageWhereInput
  spotifyToken: String
  spotifyToken_contains: String
  spotifyToken_ends_with: String
  spotifyToken_gt: String
  spotifyToken_gte: String
  spotifyToken_in: [String!]
  spotifyToken_lt: String
  spotifyToken_lte: String
  spotifyToken_not: String
  spotifyToken_not_contains: String
  spotifyToken_not_ends_with: String
  spotifyToken_not_in: [String!]
  spotifyToken_not_starts_with: String
  spotifyToken_starts_with: String
}

input UserWhereUniqueInput {
  email: String
  id: ID
  name: String
}
